========================================================================
PISA  (www.tik.ee.ethz.ch/pisa/)
========================================================================
Computer Engineering (TIK)
ETH Zurich	 
========================================================================
WFG - Suite of continuous test problems by Lucas Bradstreet, Luigi Barone,
Lyndon While and Simon Huband

Documentation

authors: Simon Huband, Luigi Barone, Lyndon While, and Phil Hingston. 
  
author: Johannes Bader, johannes.bader@tik.ee.ethz.ch
last change: 30.07.2008
========================================================================

The Problem
===========
The following description is http://www.wfg.csse.uwa.edu.au/toolkit/README.txt

Note:
  * The I1-I5 functions were not intended to be used as benchmark functions, although they're pretty functional as is,
    and I5 represents a very difficult kind of problem.
  * The bias in WFG1 is pretty significant, so much so that the limited precision of double's on most systems may cause problems. 
    This is worth bearing in mind when considering the results, and particularly when comparing results between algorithms that 
    were implemented on different systems.

Recommended values for k and l:
  * Whilst it is largely a matter of choice, letting l=20 should be sufficient for the number of distance-related parameters.
  * Whilst suggesting a value for k, the number of position-related parameters, is more difficult, we suggest the following:
    - If M == 2, then let l == 4. Otherwise, if M >= 3, let l == 2*(M-1). 
      This ensures there is always at least four position-related parameters, 
      and never the absolute minimum number of position-related parameters. 
      For problems exploring a large number of objectives, it may be desirable to 
      just use the minimum number of position-related parameters.

This canonical form of this archive is available at http://www.wfg.csse.uwa.edu.au/.

For any queries, email s.huband@ecu.edu.au, or for full contact details, visit http://www.wfg.csse.uwa.edu.au/.

Copyright 2006, Walking Fish Group. 

The Variation Operators
=======================

The individuals are represented as real vectors, normalized to the
interval [0,1]. The variation operators are the SBX (simulated binary
crossover) and the polynomial mutation operator (see [Deb2001a]). If
the parameter <variable_recombination_probability> is set to 0 and
<variable_swap_probability> set to 0.5, the recombination is
equivalent to uniform crossover.

The Parameters
==============

This module uses the following values for the common parameters:

alpha   (size of the initial population)
mu      (number of parent individuals)
lambda  (number of offspring individuals, has to be equal to mu)
dim     (number of objectives)

'PISA_cfg' is a sample PISA_configuration file.

WFG takes 15 local parameters which are given in a parameter file. 
The name of this parameter file is passed to the wfg program as
command line argument. 

problem (test problem name, e.g., WFG1 or WFG2)

seed (seed for random number generator)

number_decision_variables (number of decision variables), has to be
	equal to number_position_variables + number_distance_variables

number_position_variables (number of position related variables, k)

number_distance_variables (number of distance related variables, l)

maxgen (maximum number of iterations)

outputfile (outputfile)

individual_mutation_probability (probability that a certain individual
undergoes mutation)

individual_recombination_probability (probability that a certain pair
of individuals undergoes recombination) 

variable_mutation_probability (probability that a certain variable in
a given individual is mutated)

variable_swap_probability (probability that a certain pair of
variables is swapped during recombination)

variable_recombination_probability (probability that the SBX
recombination operator is used for a given pair of variables; this
decision is independent from variable_swap_probability)

eta_mutation 20 (distribution index for mutation operator)

eta_recombination 15 (distribution index for recombination operator)

use_symmetric_recombination 1 (switch on or off the symmetry
constraint for recombination)

'wfg_param.txt' is a PISA_parameter file.


Usage
=====

Call WFG with the following arguments:

wfg paramfile filenamebase poll

paramfile: specifies the name of the file containing the local
parameters (e.g. wfg_param.txt)

filenamebase: specifies the name (and optionally the directory) of the
communication files. The filenames of the communication files and the
configuration file are built by appending 'sta', 'var', 'sel','ini',
'arc' and 'cfg' to the filenamebase. This gives the following names for
the '../PISA_' filenamebase:

../PISA_cfg - configuration file
../PISA_ini - initial population
../PISA_sel - individuals selected for variation
../PISA_var - variated individuals (offspring)
../PISA_arc - individuals in the archive

Caution: the filenamebase must be consistent with the name of
the configuration file and the filenamebase specified for the selector
module.

poll: gives the value for the polling time in seconds (e.g. 0.5).


Output
======

WFG writes the content of the archive in the last generation to a
specified output file. One individual is written per line using the
following format:

ID (objective 1) (objective 2) ... (objective dim) (decision variable
1) (decision variable 2) ... (decision variable <number_decision_variables>) 

Limitations
===========

This WFG module can only handle mu == lambda. If an odd number is
chosen for mu and lambda, the last individual in the mating pool can
only undergo mutation, as it has no recombination partner.

The number of position related variables and number of distance 
related parameters must fulfill certain condition, as described
under "The Problem".

Stopping and Resetting
======================

The behaviour in state 7 and 11 is not determined by the interface but
by each variator module specifically. DTLZ behaves as follows:

state 7 (= selector terminated): set state to 4 (terminate as well).
state 11 (= selector resetted): set state to 0 (start again).

The user can change the state variable in the sta file using a text
editor, e.g., for stopping both processes or for resetting. DTLZ 
assumes that the variator is resetted before the selector, i.e., state
8 is present before state 10.
